#!/usr/bin/env python3
import argparse
import os
import yaml
import stat
import sys
import datetime
from termcolor import colored, cprint
from pick import pick
from pyfiglet import Figlet
import yalies
import yaledining
import yalecourses
import yalebuildings
import yaleorgdirectory
import yalelaundry

parser = argparse.ArgumentParser(description='The CLI tool for life at Yale.')
parser.add_argument('--debug', default=False, action='store_true', help='Output debug information')
subparsers = parser.add_subparsers(help='Subcommand help', dest='subcommand', required=True)

parser_dining = subparsers.add_parser('dining', help='Get information about the dining halls currently open, their menus, etc.')
parser_dining.add_argument('hall', nargs='?', help='Name or abbreviation of hall to get information about')
parser_dining.add_argument('--menu', action='store_true', help='View a dining hall\'s full menu')

parser_courses = subparsers.add_parser('courses', help='Get information about courses and subjects offered at Yale')
parser_courses.add_argument('identifier', help='The course name or subject area to get information about')

parser_building = subparsers.add_parser('building', help='Learn about the buildings on campus')
parser_building.add_argument('building_id', help='The ID of the building to learn about')

parser_people = subparsers.add_parser('people', help='Look up people at Yale')
parser_people.add_argument('query', help='Name of person to search for')

parser_organizations = subparsers.add_parser('organizations', help='Research organizations and institutions on campus')
parser_organizations.add_argument('organization_name', nargs='?', help='Name of organization to search for')
parser_organizations.add_argument('-t', dest='tags', nargs='*', help='Tags to narrow your search')

#parser_laundry = subparsers.add_parser('laundry', help='Check the status of laundry rooms on campus')
#parser_laundry.add_argument('laundry_room', nargs='?', help='Name of laundry location')

args = parser.parse_args()

CREDENTIALS_PATH = os.environ['HOME'] + '/.yale_credentials.yml'
credentials = {
    'NetID': '',
    'Password': '',
    'yale_api_key': '',
    'yalies_api_key': '',
}
if os.path.isfile(CREDENTIALS_PATH) and os.path.getsize(CREDENTIALS_PATH) != 0:
    with open(CREDENTIALS_PATH, 'r') as f:
        credentials = yaml.load(f, Loader=yaml.SafeLoader)
else:
    credentials['NetID'] = input('NetID: ')
    from getpass import getpass
    credentials['Password'] = getpass('Password: ')
    credentials['yale_api_key'] = getpass('Yale API key (go to https://yale.dev.ca.com/admin/app/applications and add an application): ')
    credentials['yalies_api_key'] = getpass('Yalies API key (from https://yalies.io/apidocs): ')
    with open(CREDENTIALS_PATH, 'w') as f:
        yaml.dump(credentials, f)
    os.chmod(CREDENTIALS_PATH, stat.S_IRUSR | stat.S_IWUSR)

# Warn if group or public can read config and the private details therein.
if os.stat(CREDENTIALS_PATH).st_mode & (stat.S_IRGRP | stat.S_IROTH):
    print('Warning: config file may be accessible by other users.', file=sys.stderr)

CONFIG_PATH = os.environ['HOME'] + '/.yale.yml'
config = {
}
if os.path.isfile(CONFIG_PATH) and os.path.getsize(CONFIG_PATH) != 0:
    with open(CONFIG_PATH, 'r') as f:
        config = yaml.load(f, Loader=yaml.SafeLoader)
else:
    config = {key: input(key + ': ') for key in config.keys()}
    config.update({
        'show_closed': False,
        'figlet': False,
    })
    with open(CONFIG_PATH, 'w') as f:
        yaml.dump(config, f)


def debug(content):
    """
    Log debug output if enabled.
    :param content: content to log
    """
    if args.debug:
        print(content)


def error(content):
    """
    Log errors.
    :param content: content to log
    """
    print(colored(content, 'red'), file=sys.stderr)


def occupancy_color(occupancy):
    if occupancy > 7: return 'red'
    if occupancy > 5: return 'yellow'
    return 'green'


def occupancy_bar(open, occupancy):
    if not open or occupancy is None:
        return ''
    return colored(('▇' * occupancy) + ('░' * (10 - occupancy)), occupancy_color(occupancy))


def bullet_simple(title=None):
    if title:
        print(colored(title + ': ', 'blue'))


def bullet(title, details=None):
    if details:
        if type(details) != str:
            details = str(details)
        print(colored(title + ': ', 'blue') + details)


def bullet_list(points):
    for point in points:
        bullet(*point)


def bullet_comma(title, details: list):
    # Make sure we don't log nothing
    if details:
        title += ': '
        print(colored(title, 'blue') + details.pop(0), end='')
        for detail in details:
            print(',\n' + ' ' * len(title) + detail, end='')
        print()

figlet = Figlet(font='slant')
def title(text):
    if config['figlet']:
        text = figlet.renderText(text)
    print(colored(text, 'blue'))


def log_person(person):
    # TODO: show full name
    bullet('Name', f'{person.first_name} {person.last_name}')
    bullet('Pronouns', person.pronouns)
    bullet('Title', person.title)
    bullet('NetID', person.netid)
    bullet('UPI', person.upi)
    bullet('Phone', person.phone)
    bullet('Address', person.address)
    # Students
    if person.school_code:
        bullet('School', f'{person.school} ({person.school_code})')
        bullet('Year', f'{person.year} (Took Leave)' if person.leave else person.year)
        if person.school_code == 'YC':
            bullet('College', person.college)
            if person.eli_whitney:
                bullet('Eli Whitney', 'Yes')
            bullet('Birthday', person.birthday)
            bullet('Residence', person.residence)
            bullet('Access Code', person.access_code)
    else:
        if person.organization:
            bullet('Organization', f'{person.organization} ({person.organization_code})')
        if person.unit:
            bullet('Unit', f'{person.unit} ({person.unit_class}/{person.unit_code})')
        bullet('Postal Address', person.postal_address)
        bullet('Office Buliding', person.office_building)
        bullet('Office Room', person.office_room)
        bullet('CV', person.cv)
        bullet('Department Profile', person.profile_url)
        bullet('Website', person.website)
        bullet('Education', person.education)
        bullet('Publications', person.publications)


def log_organization(organization):
    bullet('Name', organization.name)
    bullet('Website', organization.website)
    bullet('Address', organization.address)
    bullet('Room', organization.room)
    bullet('Telephone', organization.telephone)

if args.subcommand == 'dining':
    api = yaledining.API()
    if args.hall is None:
        halls = api.halls()
        halls_open = [hall for hall in halls if hall.open]
        if halls_open:
            for hall in halls_open:
                debug(hall)
                print(colored(hall.name.ljust(16), 'green') + ' ' + occupancy_bar(hall.open, hall.occupancy))
        else:
            print(colored('No dining halls open currently.', 'blue'))
        if config['show_closed']:
            halls_closed = [hall for hall in halls if not hall.open]
            if halls_closed:
                print(colored('Closed: ' + ', '.join([hall.name for hall in halls_closed]), 'red'))
    else:
        # TODO: support name or abbreviation
        hall = api.hall(args.hall)
        if hall is None:
            error('Unknown hall name or abbreviation.')
        print(colored('/' * 3 + ' ' + hall.name + ' ' + '/' * 3, 'blue'))
        print()
        bullet('Address', '{address} ({latitude}, {longitude})'.format(address=hall.address,
                                                                       latitude=hall.latitude,
                                                                       longitude=hall.longitude))
        bullet('Phone', hall.phone)
        bullet_comma('Managers', [
            '{position}{name}{email}'.format(position=(manager.position + ': ') if manager.position else '',
                                             name=manager.name,
                                             email=' (' + manager.email + ')' if manager.email else '')
            for manager in hall.managers
        ])
        # TODO: support querying meals for other days
        for meal in hall.meals(datetime.date.today()):
            print()
            print(colored(meal.date + ' / ' + meal.name, 'blue', attrs=['underline']))
            for item in meal.items:
                print('- ' + item.name)
elif args.subcommand == 'courses':
    api = yalecourses.YaleCourses(credentials['yale_api_key'])
    if yalecourses.is_subject(args.identifier):
        courses = api.courses(args.identifier)
        if not courses:
            print(args.identifier + ' is not a recognized subject.')
        else:
            for course in courses:
                bullet(course.code, course.name)
    else:
        course = api.course(args.identifier)
        if not course:
            print(args.identifier + ' is not a recognized course.')
        else:
            bullet(course.code, course.name)
            if course.meeting_patterns:
                bullet('Meeting schedule(s)', ', '.join(course.meeting_patterns))
            bullet('Professors', ', '.join(course.instructors))
            bullet('School', course.school_name)
            bullet('Registration available', ('YES' if course.active else 'NO'))
            bullet('Description')
            print(course.raw_description)
elif args.subcommand == 'building':
    api = yalebuildings.YaleBuildings(credentials['yale_api_key'])
    building = api.building(args.building_id)
    bullet(building.id, building.name)
    if building.category:
        bullet('Category', building.category)

    bullet_comma('Address', [building.address_1, building.address_2 + ' ' + building.address_3])
    if building.latitude and building.longitude:
        bullet('Coordinates', f'({building.latitude}, {building.longitude})')
    if building.historical_name:
        bullet('Historical name', building.historical_name)
    if building.prose:
        bullet('Fun facts', building.fun_facts)
elif args.subcommand == 'people':
    api = yalies.API(config['yalies_api_key'])
    people = api.people(query=args.query)
    if len(people) == 1:
        person = people[0]
        log_person(person)
    for person in people:
        # TODO: give more brief logs if there are lots of people
        log_person(person)
elif args.subcommand == 'organizations':
    api = yaleorgdirectory.YaleOrgDirectory(credentials['yale_api_key'])
    if args.organization_name:
        organization = api.organization(args.organization_name)
        log_organization(organization)
    else:
        organizations = api.organizations(tags=args.tags)
        name, index = pick([organization.name for organization in organizations])
        organization = api.organization(name)
        log_organization(organization)
"""
elif args.subcommand == 'laundry':
    api = yalelaundry.YaleLaundry(credentials['yale_api_key'])
    if not args.laundry_room:
        rooms = api.rooms()
        name, index = pick([room.name for room in rooms])
        room = rooms[index]
    else:
        room = api.room(args.laundry_room)
    use = room.use
    title(room.name)
    items = [("Washers available", f"{use.available.washers}/{use.total.washers}"),
              ("Dryers available", f"{use.available.dryers}/{use.total.dryers}")]
    for appliance in room.appliances:
        items.append((f"{appliance.type} {appliance.number}", appliance.time_remaining_raw))
    bullet_list(items)
"""
