#!/usr/bin/env python3
import argparse
import os
import yaml
import stat
import sys
import requests
from termcolor import colored, cprint
import yaledining
import yalecourses

parser = argparse.ArgumentParser(description='Perform Yale-related tasks')
parser.add_argument('--debug', default=False, action='store_true', help='Output debug information')
subparsers = parser.add_subparsers(help='Subcommand help', dest='subcommand', required=True)
parser_dining = subparsers.add_parser('dining')
parser_dining.add_argument('location', nargs='?')
parser_courses = subparsers.add_parser('courses')
parser_courses.add_argument('identifier')
args = parser.parse_args()

CREDENTIALS_PATH = os.path.expanduser('~') + '/.yale_credentials.yml'
credentials = {
    'NetID': '',
    'Password': '',
    'yale_api_key': '',
}
if os.path.isfile(CREDENTIALS_PATH) and os.path.getsize(CREDENTIALS_PATH) is not 0:
    with open(CREDENTIALS_PATH, 'r') as f:
        credentials = yaml.load(f, Loader=yaml.SafeLoader)
else:
    credentials['NetID'] = input('NetID: ')
    from getpass import getpass
    credentials['Password'] = getpass('Password: ')
    credentials['yale_api_key'] = input('Yale API key (go to https://yale.dev.ca.com/admin/app/applications and add an application): ')
    with open(CREDENTIALS_PATH, 'w') as f:
        yaml.dump(credentials, f)
    os.chmod(CREDENTIALS_PATH, stat.S_IRUSR | stat.S_IWUSR)

# Warn if group or public can read config and the private details therein.
if os.stat(CREDENTIALS_PATH).st_mode & (stat.S_IRGRP | stat.S_IROTH):
    print('Warning: config file may be accessible by other users.', file=sys.stderr)

CONFIG_PATH = os.path.expanduser('~') + '/.yale.yml'
config = {
}
if os.path.isfile(CONFIG_PATH) and os.path.getsize(CONFIG_PATH) is not 0:
    with open(CONFIG_PATH, 'r') as f:
        config = yaml.load(f, Loader=yaml.SafeLoader)
else:
    config = {key: input(key + ': ') for key in config.keys()}
    config.update({
        # Nothing here yet
    })
    with open(CONFIG_PATH, 'w') as f:
        yaml.dump(config, f)

def debug(content):
    """
    Log debug output if enabled.
    :param content: content to log
    """
    if args.debug:
        print(content)

def error(content):
    """
    Log errors.
    :param content: content to log
    """
    print(colored(content, 'red'), file=sys.stderr)

def capacity_color(capacity):
    if capacity > 7: return 'red'
    if capacity > 5: return 'yellow'
    return 'green'

def capacity_bar(open, capacity):
    if not open or capacity is None:
        return ''
    return colored(('‚ñá' * capacity) + ('‚ñë' * (10 - capacity)), capacity_color(capacity))

def bullet(title, details: str = ''):
    print(colored(title + ': ', 'blue') + details)

def bullet_list(title, details: list):
    # Make sure we don't log nothing
    if details:
        title += ': '
        print(colored(title, 'blue') + details.pop(0), end='')
        for detail in details:
            print(',\n' + ' ' * len(title) + detail, end='')
        print()

if args.subcommand == 'dining':
    dining = yaledining.YaleDining()
    # Reshuffle into list of dicts for easy subscripting
    type_symbols = {
        'Residential': 'üè†',
        'Retail': 'üí∞',
    }
    if args.location is None:
        for location in dining.locations():
            debug(location)
            print(colored(type_symbols[location.type] + ' ' + location.name, 'green' if location.open else 'grey') + ' ' + capacity_bar(location.open, location.capacity))
    else:
        location = dining.location(args.location)
        if location is None:
            error('Unknown location name.')
        print(colored('/' * 3 + ' ' + location.name + ' ' + '/' * 3, 'blue'))
        print()
        bullet('Address', '{address} ({coordinates})'.format(address=location.address,
                                                             coordinates=location.geolocation))
        bullet('Phone', location.phone)
        bullet_list('Managers', [f'{manager.name} ({manager.email})' for manager in location.managers])
        for meal in location.meals:
            print()
            print(colored(meal.date.strftime('%m/%d') + ' / ' + meal.name, 'blue', attrs=['underline']))
            for item in meal.items:
                print('- ' + item.name)
elif args.subcommand == 'courses':
    api = yalecourses.YaleCourses(credentials['yale_api_key'])
    if yalecourses.is_subject(args.identifier):
        courses = api.courses(args.identifier)
        if not courses:
            print(args.identifier + ' is not a recognized subject.')
        else:
            for course in courses:
                bullet(course.code, course.name)
    else:
        course = api.course(args.identifier)
        if not course:
            print(args.identifier + ' is not a recognized course.')
        else:
            bullet(course.code, course.name)
            if course.meeting_patterns:
                bullet('Meeting schedule(s)', ', '.join(course.meeting_patterns))
            bullet('Professors', ', '.join(course.instructors))
            bullet('School', course.school_name)
            bullet('Registration available' , ('YES' if course.active else 'NO'))
            bullet('Description')
            print(course.raw_description)
