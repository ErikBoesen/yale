#!/usr/bin/env python3
import argparse
import os
import yaml
import stat
import sys
import requests
from termcolor import colored, cprint
import yaledining

parser = argparse.ArgumentParser(description='Perform Yale-related tasks')
subparsers = parser.add_subparsers(help='Subcommand help', dest='subcommand', required=True)
parser_dining = subparsers.add_parser('dining')
parser_dining.add_argument('location', nargs='?')
parser.add_argument('--debug', default=False, action='store_true', help='Output debug information')
args = parser.parse_args()

CREDENTIALS_PATH = os.path.expanduser('~') + '/.yale_credentials.yml'
credentials = {
    'NetID': '',
    'Password': '',
}
if os.path.isfile(CREDENTIALS_PATH) and os.path.getsize(CREDENTIALS_PATH) is not 0:
    with open(CREDENTIALS_PATH, 'r') as f:
        credentials = yaml.load(f, Loader=yaml.SafeLoader)
else:
    credentials['NetID'] = input('NetID: ')
    from getpass import getpass
    credentials['Password'] = getpass('Password: ')
    with open(CREDENTIALS_PATH, 'w') as f:
        yaml.dump(credentials, f)
    os.chmod(CREDENTIALS_PATH, stat.S_IRUSR | stat.S_IWUSR)

# Warn if group or public can read config and the private details therein.
if os.stat(CREDENTIALS_PATH).st_mode & (stat.S_IRGRP | stat.S_IROTH):
    print('Warning: config file may be accessible by other users.', file=sys.stderr)

CONFIG_PATH = os.path.expanduser('~') + '/.yale.yml'
config = {
}
if os.path.isfile(CONFIG_PATH) and os.path.getsize(CONFIG_PATH) is not 0:
    with open(CONFIG_PATH, 'r') as f:
        config = yaml.load(f, Loader=yaml.SafeLoader)
else:
    config = {key: input(key + ': ') for key in config.keys()}
    config.update({
        # Nothing here yet
    })
    with open(CONFIG_PATH, 'w') as f:
        yaml.dump(config, f)

def debug(content):
    """
    Log debug output if enabled.
    :param content: content to log
    """
    if args.debug:
        print(content)

def error(content):
    """
    Log errors.
    :param content: content to log
    """
    print(colored(content, 'red'), file=sys.stderr)

def capacity_color(capacity):
    if capacity > 7: return 'red'
    if capacity > 5: return 'yellow'
    return 'green'

def capacity_bar(capacity):
    return colored(('‚ñá' * capacity) + ('‚ñë' * (10 - capacity)), capacity_color(capacity))

def bullet(title, details):
    print(' ' * 4 + colored(title + ': ', 'blue') + details)

if args.subcommand == 'dining':
    dining = yaledining.YaleDining()
    # Reshuffle into list of dicts for easy subscripting
    type_symbols = {
        'Residential': 'üè†',
        'Retail': 'üí∞',
    }
    if args.location is None:
        locations = dining.locations()
        for location in locations:
            debug(location)
            print(colored(type_symbols[location.type] + ' ' + location.name, 'green' if location.open else 'red'), end='')
            if location.open:
                print(' ' + capacity_bar(location.open, location.capacity))
                bullet('Address', '{address} ({coordinates})'.format(address=location.address,
                                                                     coordinates=location.geolocation))
                bullet('Phone', location.phone)
                bullet('Managers', ', '.join([f'{manager.name} ({manager.email})' for manager in managers]))
            else:
                # TODO: this is messy
                print()
    else:
        location = dining.location(name=args.location)
        if location is None:
            error('Unknown location name.')
        menus = location.menus
        # TODO: finish that...
        print('Menu lookup is WIP')
        print(menus)
elif args.subcommand == 'class':
    pass
